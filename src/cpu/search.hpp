#pragma once
#include <vector>
#include <queue>
#include <limits>
#include <string>
#include <iomanip>

// Adjacency list (format that's generated by the graph generator)
struct Edge {
    int to;
    int weight;
};

using Graph = std::vector<std::vector<Edge>>;

// Core algorithms
std::vector<int> dijkstra(const Graph& graph, int source);
std::vector<int> bellman_ford(const Graph& graph, int source);
std::vector<int> bfs_sssp(const Graph& graph, int source);
std::vector<std::vector<int>> johnson(const Graph& graph);
std::vector<int> astar(const Graph& graph, int source, int target, const std::vector<int>& heuristic);

// Utility functions
bool has_negative_cycle(const Graph& graph, int source);
bool has_negative_weight(const Graph& graph);
Graph load_graph_from_file(const std::string& filename, int num_vertices);
void print_distances(const std::vector<int>& distances);
void print_graph(const Graph& graph);
void print_all_pairs_distances(const std::vector<std::vector<int>>& distances);
void print_path(const std::vector<int>& path);
bool is_connected(const Graph& graph);